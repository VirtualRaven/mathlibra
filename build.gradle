apply plugin: "cpp"

	 task createGitHeader<< {
		println "Updating git info..."
		def tmp = "git describe --dirty=-D".execute()
		tmp.waitForOrKill(10000)
		if(tmp.exitValue() != 0){
			throw new GradleException("Could not get git info")
		}
		else{
			
			def fileContent = { tag, number, sha -> 
	"""
	#define GIT_NAME \"${tag}\"
	#define GIT_SHA  \"${sha}\"
	#define GIT_NUM  \"${number}\"
	"""
			}
	
			def res = tmp.text.split("-",4)
			project.buildDir.mkdirs()
			if(res.size() >= 3 && res.size() <= 4){
				new File(project.buildDir.getAbsolutePath()+ "/GIT_VERSION.h").withWriter { out ->
					out.print fileContent(res[0].trim(),res[1].trim(),res[2].trim())
					if(res.size() == 4){
						out.println "#define GIT_DIRTY"
					}
				}
			}
			else{
				throw new GradleException("Output from git describe not understood")
			}		
			println "Git update done"
		}
	}


model
{
		
	buildTypes {
		debug
		release
	}
	tasks{

		createPyTest0(Copy){
		dependsOn $.binaries.withType(SharedLibraryBinarySpec).findAll({ it.toString().contains("mathlibra_C") && it.buildable })
		from "$buildDir/libs/mathlibra_C/shared/debug/"
		include "*.so"
		into "$buildDir/py_test"}
		
		createPyTest1(Copy){
		from "wrapper/c_api_interface/"
		include "*.py"
		into "$buildDir/py_test"}
		
		runPyTest(Exec){
			2.times{ i-> 
				dependsOn "createPyTest$i"
			}
			workingDir "$buildDir/py_test"
			commandLine 'python', "run_tests.py"
		}
		mkCXXApi(Copy){
			from "wrapper/common/main_wrapper.h"
			from "core/core/type_interface.h"
			from "core/core/type.h"
			from "core/core/type_enum.h"
			from "core/ptr_protect.h"
			from "core/exception_helper.h"
			from "core/exception.h"
			from "wrapper/c++_wrapper/export.h"
			rename { String fileName -> "mathlibra_CXX/include/" + fileName}
			into "$buildDir/mkCXXApi"
		}
		mkCApi(Copy){
			from "wrapper/c_api_interface/c_api.h"
			from "core/core/type_enum.h"
			rename { String fileName -> "mathlibra_C/include/" + fileName }
			into "$buildDir/mkCApi"
		}	
		zip(Zip){
			baseName "mathlibra"
			dependsOn $.binaries.findAll { it.buildable }
			dependsOn createGitHeader
			destinationDir project.buildDir
			from project.buildDir.getAbsolutePath() + "/libs"
			from mkCXXApi
			from mkCApi
			exclude "core_lib"	
			
		}
	}
	
	binaries{
	all{	
			if(buildType == buildTypes.debug)
			{
				cppCompiler.define "DEBUG"
			}
			if(toolChain in Gcc)
			{
				if(buildType == buildTypes.release)
				{
					cppCompiler.args "-std=c++11", "-O2", "-Wall", "-pedantic"
					linker.args "-ldl"
				}
				else
				{
					cppCompiler.args "-std=c++11", "-Wall", "-pedantic", "-g"
					linker.args "-ldl"
				}
			}
	}
	}
	components {
		core_lib(NativeLibrarySpec) {
			binaries.all{
				if(toolChain in Gcc)
				{
					cppCompiler.args "-fPIC"
				}
				if(targetPlatform.operatingSystem.isLinux()){
					cppCompiler.define "LINUX"
				}
				else if(targetPlatform.operatingSystem.isWindows()){
					cppCompiler.define "WINDOWS"
				}
				else{
					throw new GradleException("Platform unknown, cannont select plugin loader")
				}
			}
			sources {
				cpp{
					source {
						srcDirs "core/core/",
							"core/core/modules",
							"core/core/plugins",
							"core/",
							"core/interface"
						
						include "**/*.cpp"
					}
					exportedHeaders {
						srcDirs "core/core/",
							"core/core/modules",
							"core/core/plugins",
							"core/",
							"core/interface"
						include "**/*.h"
					}
					lib sources.generated
				}
				generated(CppSourceSet){
					exportedHeaders {
						srcDirs  project.buildDir.getAbsolutePath()
						include "GIT_VERSION.h"
					}
					builtBy createGitHeader
				}
				
				
			}
		}
		
		core_tester(NativeExecutableSpec)
		{	
			sources{
				cpp{
					cpp.lib library: "core_lib", linkage: "static"
					source{
						srcDirs "tester"
						include "*.cpp"
						}
					exportedHeaders
					{
						srcDirs "tester"
						include "*.h"
					}
				}
			}
		}
		mathlibra_CXX(NativeLibrarySpec)
		{
			sources{
				cpp{
					lib library: "core_lib", linkage: "static"
					source{
						srcDirs "wrapper/c++_wrapper", "wrapper/common"
						include "*.cpp"
					}
					exportedHeaders{
						srcDirs "wrapper/c++_wrapper", 
							"wrapper/common",
							"wrapper"
						include "*.h"
					}	
				}
					
			}				
		}
		mathlibra_C(NativeLibrarySpec)
		{
			sources{
				cpp{
					lib library: "core_lib", linkage: "static"
					source{
						srcDirs "wrapper/c_api_interface", "wrapper/common"
						include "*.cpp"
					}
					exportedHeaders{
						srcDirs "wrapper/c_api_interface", "wrapper/common"
						include "*.h"
					}	
					}
				}
				
		}
		mathlibra_CXX_client(NativeExecutableSpec)
		{
			sources{
				cpp{
					lib library: "mathlibra_CXX", linkage: "shared"
					lib library: "core_lib", linkage: "api"
					source{
						srcDirs "wrapper/c++_wrapper_client"
						include "*.cpp"
					}
					exportedHeaders{
						srcDirs "wrapper/c++_wrapper_client"
						include "*.h"
					}	
					}
				}
		}
		
	}		
}

